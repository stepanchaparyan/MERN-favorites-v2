// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Register component test with Enzyme renders snapshot 1`] = `
<styled.div>
  <styled.div>
    Sign Up
  </styled.div>
  <Formik
    initialValues={
      Object {
        "email": "",
        "name": "",
        "password": "",
        "password2": "",
      }
    }
    onSubmit={[Function]}
    validationSchema={
      ObjectSchema {
        "_blacklist": ReferenceSet {
          "list": Set {},
          "refs": Map {},
        },
        "_excludedEdges": Array [],
        "_mutate": undefined,
        "_nodes": Array [
          "password2",
          "password",
          "email",
          "name",
        ],
        "_sortErrors": [Function],
        "_typeError": [Function],
        "_whitelist": ReferenceSet {
          "list": Set {},
          "refs": Map {},
        },
        "conditions": Array [],
        "deps": Array [],
        "exclusiveTests": Object {},
        "fields": Object {
          "email": StringSchema {
            "_blacklist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_blacklistError": undefined,
            "_mutate": undefined,
            "_typeError": [Function],
            "_whitelist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_whitelistError": undefined,
            "conditions": Array [],
            "deps": Array [],
            "exclusiveTests": Object {
              "email": false,
              "required": true,
            },
            "spec": Object {
              "abortEarly": true,
              "label": undefined,
              "meta": undefined,
              "nullable": false,
              "presence": "required",
              "recursive": true,
              "strict": false,
              "strip": false,
            },
            "tests": Array [
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
            "type": "string",
          },
          "name": StringSchema {
            "_blacklist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_blacklistError": undefined,
            "_mutate": undefined,
            "_typeError": [Function],
            "_whitelist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_whitelistError": undefined,
            "conditions": Array [],
            "deps": Array [],
            "exclusiveTests": Object {
              "required": true,
            },
            "spec": Object {
              "abortEarly": true,
              "label": undefined,
              "meta": undefined,
              "nullable": false,
              "presence": "required",
              "recursive": true,
              "strict": false,
              "strip": false,
            },
            "tests": Array [
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
            "type": "string",
          },
          "password": StringSchema {
            "_blacklist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_blacklistError": undefined,
            "_mutate": undefined,
            "_typeError": [Function],
            "_whitelist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_whitelistError": undefined,
            "conditions": Array [],
            "deps": Array [],
            "exclusiveTests": Object {
              "min": true,
              "required": true,
            },
            "spec": Object {
              "abortEarly": true,
              "label": undefined,
              "meta": undefined,
              "nullable": false,
              "presence": "required",
              "recursive": true,
              "strict": false,
              "strip": false,
            },
            "tests": Array [
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
            "type": "string",
          },
          "password2": StringSchema {
            "_blacklist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_blacklistError": undefined,
            "_mutate": undefined,
            "_typeError": [Function],
            "_whitelist": ReferenceSet {
              "list": Set {
                null,
              },
              "refs": Map {
                "password" => Reference {
                  "getter": [Function],
                  "isContext": false,
                  "isSibling": true,
                  "isValue": false,
                  "key": "password",
                  "map": undefined,
                  "path": "password",
                },
              },
            },
            "_whitelistError": [Function],
            "conditions": Array [],
            "deps": Array [],
            "exclusiveTests": Object {
              "required": true,
            },
            "spec": Object {
              "abortEarly": true,
              "label": undefined,
              "meta": undefined,
              "nullable": false,
              "presence": "required",
              "recursive": true,
              "strict": false,
              "strip": false,
            },
            "tests": Array [
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
            "type": "string",
          },
        },
        "spec": Object {
          "abortEarly": true,
          "label": undefined,
          "meta": undefined,
          "nullable": false,
          "presence": "optional",
          "recursive": true,
          "strict": false,
          "strip": false,
        },
        "tests": Array [],
        "transforms": Array [
          [Function],
        ],
        "type": "object",
      }
    }
  >
    <Styled(Form)>
      <Styled(Field)
        id="name"
        name="name"
        placeholder="Name"
        type="text"
      />
      <FormikConnect(ErrorMessageImpl)
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "baseHash": -1474970742,
              "componentId": "sc-Axmtr",
              "isStatic": false,
              "rules": Array [
                "color:red;width:30%;font-size:12px;",
              ],
              "staticRulesId": "",
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "shouldForwardProp": undefined,
            "styledComponentId": "sc-Axmtr",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        name="name"
      />
      <Styled(Field)
        id="email"
        name="email"
        placeholder="Email"
        type="email"
      />
      <FormikConnect(ErrorMessageImpl)
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "baseHash": -1474970742,
              "componentId": "sc-Axmtr",
              "isStatic": false,
              "rules": Array [
                "color:red;width:30%;font-size:12px;",
              ],
              "staticRulesId": "",
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "shouldForwardProp": undefined,
            "styledComponentId": "sc-Axmtr",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        name="email"
      />
      <Styled(Field)
        id="password"
        name="password"
        placeholder="Password"
        type="password"
      />
      <FormikConnect(ErrorMessageImpl)
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "baseHash": -1474970742,
              "componentId": "sc-Axmtr",
              "isStatic": false,
              "rules": Array [
                "color:red;width:30%;font-size:12px;",
              ],
              "staticRulesId": "",
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "shouldForwardProp": undefined,
            "styledComponentId": "sc-Axmtr",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        name="password"
      />
      <Styled(Field)
        id="password2"
        name="password2"
        placeholder="Confirm Password"
        type="password"
      />
      <FormikConnect(ErrorMessageImpl)
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "baseHash": -1474970742,
              "componentId": "sc-Axmtr",
              "isStatic": false,
              "rules": Array [
                "color:red;width:30%;font-size:12px;",
              ],
              "staticRulesId": "",
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "shouldForwardProp": undefined,
            "styledComponentId": "sc-Axmtr",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        name="password2"
      />
      <styled.div>
        <styled.button
          onClick={[Function]}
          type="button"
        >
          a
        </styled.button>
      </styled.div>
      <styled.button
        disabled="a"
        type="submit"
      >
        Sign Up
      </styled.button>
    </Styled(Form)>
  </Formik>
  <styled.div>
    Already have an accout?
      
    <Link
      to="/login"
    >
      Sign In
    </Link>
  </styled.div>
</styled.div>
`;
